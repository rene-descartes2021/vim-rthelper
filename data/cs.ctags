# Copyright (c) 2022 Rene.Descartes2021

--excmd=number
--tag-relative=yes
--extras=+p-q
###--extras=+pq
--pseudo-tags=+{TAG_EXTRA_DESCRIPTION}{TAG_KIND_DESCRIPTION}{TAG_FIELD_DESCRIPTION}{TAG_PROC_CWD}
--langdef=cs{_autoFQTag}
--map-c#=-.cs
--map-cs=+.cs
###--_fielddef-cs=at,Attributes
--_fielddef-cs=sl,sealed
--_fielddef-cs=inherits,inherits
--_fielddef-cs=type,type
--_fielddef-cs=df,default
--kinddef-cs=U,using,Usings
--kinddef-cs=A,attribute,Attributes
--kinddef-cs=N,namespace,Namespaces
--kinddef-cs=C,class,Classes
--kinddef-cs=S,struct,Structures
--kinddef-cs=I,interface,Interfaces
--kinddef-cs=G,enumeration,Enumeration Names
--kinddef-cs=E,enumerator,Enumerators (values inside an enumeration)
--kinddef-cs=M,member,Members
--kinddef-cs=P,property,Properties
--kinddef-cs=H,method,Methods
--kinds-cs=+ANCSIEMP-U
###--roles-cs.A=+{rolename}
### scope: prefix required for readtags $scope
--fields=-nz
--fields=+iaStsZ
--fields-cs=+{inherits}{sl}{type}{df}
--_tabledef-cs=main
--_tabledef-cs=comment
--_tabledef-cs=namespace
--_tabledef-cs=class
### TODO: Replace struct table with class table?
--_tabledef-cs=struct
--_tabledef-cs=enum
--_tabledef-cs=function

# main (top level) table
--_mtable-regex-cs=main/\/\*//p{tenter=comment}
--_mtable-regex-cs=main/\/\/[^\n]*+//p
--_mtable-regex-cs=main/using ([^;]++)[;]/\1/U/p
--_mtable-regex-cs=main/namespace ([^\n{; ]++)(?: [{]|\n[{]|;)/\1/N/p{scope=push}{tenter=namespace}
--_mtable-regex-cs=main/[^\n]+\n|[^\n]+|\n//p
# Shouldn't ever happen:
#--_mtable-regex-cs=main/[}]//p{scope=clear}{tquit}
# I presumed that this in each table would speed things up, nope: +0.5s
#--_mtable-regex-cs=namespace/#[^\n]*+\n//p
# Possessive singulars '?+' seem to add 0.1s over just '?'
# IIRC \h was faster than ' '
# If we go back to mlines, then making separate tags for attributes
#  will help up search speed due to sort!

# comment table
--_mtable-regex-cs=comment/\*\///p{tleave}
--_mtable-regex-cs=comment/.//p

# namespace table
###--_mtable-regex-cs=namespace/\h+//p
--_mtable-regex-cs=namespace/\/\*//p{tenter=comment}
--_mtable-regex-cs=namespace/\/\/[^\n]*+//p
### Old, no newline in attribute:
### --_mtable-regex-cs=namespace/(\[[^\]\n]++\])(?:[\h\n]++)?+//p{{
--_mtable-regex-cs=namespace/(\[[^\]]++\])//p{{
	[\1 1 _matchloc]
}}
#  namespace.class
--_mtable-regex-cs=namespace/(?:\b(sealed|abstract)\b )?+(?:\bunsafe\b )?+(?:\bpartial\b )?+\bclass\b ([^\n :{<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\2/C/p{_field=inherits:(\4)}{_field=sl:\1}{scope=push}{tenter=class}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \2 typeref:
		_scoperef
	} for
}}
#  namespace.struct
--_mtable-regex-cs=namespace/\bstruct\b ([^\n :{<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\1/S/p{_field=inherits:(\3)}{scope=push}{tenter=struct}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
}}
#  namespace.interface
--_mtable-regex-cs=namespace/(?:\bpartial\b )?+\binterface\b ([^\n: {<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\1/I/p{_field=inherits:(\3)}{scope=push}{tenter=class}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
}}
#  namespace.enum
--_mtable-regex-cs=namespace/\benum\b (\b\w++\b)(?: ?: ([^\n{]++))?+(?:\n *+)?+[{]/\1/G/p{scope=push}{tenter=enum}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
	. \2 typeref:
}}
#:scope . :scope exch scope:
# [ \1 (string) ] typeref:
--_mtable-regex-cs=namespace/namespace ([^\n{; ]++)(?: [{]|\n[{]|;)/\1/N/p{scope=replace}{tenter=namespace}
--_mtable-regex-cs=namespace/[}]//p{scope=pop}{tleave}
--_mtable-regex-cs=namespace/.//p

# class table
###--_mtable-regex-cs=class/\h+//p
--_mtable-regex-cs=class/[}]//p{scope=pop}{tleave}
--_mtable-regex-cs=class/\/\*//p{tenter=comment}
--_mtable-regex-cs=class/\/\/[^\n]*+//p
--_mtable-regex-cs=class/(\[[^\]]++\])//p{{
	[\1 1 _matchloc]
}}
#  class.enum must be before property/member to match first
--_mtable-regex-cs=class/(?:\b(?:public|private|protected|internal)\b )?+\benum\b (\b\w++\b)(?: ?: ([^\n{]++))?+(?:\n *+)?+[{]/\1/G/p{scope=push}{tenter=enum}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
	. \2 typeref:
}}
#  class.class
### class must be before property to prevent property capturing it
--_mtable-regex-cs=class/(?:\b(sealed|abstract)\b )?+(?:\bunsafe\b )?+(?:\bpartial\b )?+\bclass\b ([^\n :{<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\2/C/p{_field=inherits:(\4)}{_field=sl:\1}{scope=push}{tenter=class}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \2 typeref:
		_scoperef
	} for
}}
#  class.struct
--_mtable-regex-cs=class/\bstruct\b ([^\n :{<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\1/S/p{_field=inherits:(\3)}{scope=push}{tenter=struct}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
}}
#  class.interface
--_mtable-regex-cs=class/(?:\bpartial\b )?+\binterface\b ([^\n: {<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\1/I/p{_field=inherits:(\3)}{scope=push}{tenter=class}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
}}
#  class.member
## has negative lookahead to avoid capture of e.g. 'operator ==(...)
## I've seen both ?[] and []? so I just check for it twice
--_mtable-regex-cs=class/(?:\b(?:public|private|protected|internal|virtual|static|override|readonly)\b )*+(\w++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+[?]?+(?<sbrak>[\[](?:[^\]\[]*+(?&sbrak)?+)*+[\]])?+[?]?+) (?!\boperator\b)(\b\w++\b)(?: =[>]?+\s?+ *+([^;]++))?+;/\4/M/p{_field=type:\1}{_field=df:\5}{scope=ref}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \4 typeref:
		_scoperef
	} for
}}
#  class.property
--_mtable-regex-cs=class/(?:\b(?:public|private|protected|internal|vіrtual|static|override|readonly)\b )*+(\w++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+[?]?+(?<sbrak>[\[](?:[^\]\[]*+(?&sbrak)?+)*+[\]])?+[?]?+) (\b\w++\b(?&sbrak)?+)\s?+ *+(?<brak>[{](?:[^}{]*+(?&brak)?+)*+[}])(?: =[>]?+ ([^;]++);)?+/\4/P/p{_field=type:\1}{_field=df:\6}{scope=ref}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \4 typeref:
		_scoperef
	} for
}}
#  class.function (...)[ => ...];
--_mtable-regex-cs=class/(?<par>[\(](?:[^\)\(]*+(?&par)?+)*+[\)])\s?+ *+(?:=>[^;]++)?+;//p{{
	count -1 1 {
		pop pop
	} for
}}
#  class.function (...) { ... }
--_mtable-regex-cs=class/(?<par>[\(](?:[^\)\(]*+(?&par)?+)*+[\)])[^{\n]*+(?:\n *+)?+[{]//p{tenter=function}{{
	count -1 1 {
		pop pop
	} for
}}
--_mtable-regex-cs=class/.//p

# struct table
--_mtable-regex-cs=struct/[}]//p{scope=pop}{tleave}
--_mtable-regex-cs=struct/\/\*//p{tenter=comment}
--_mtable-regex-cs=struct/\/\/[^\n]*+\n//p
--_mtable-regex-cs=struct/(\[[^\]]++\])//p{{
	[\1 1 _matchloc]
}}
#  struct.enum must be before property/member to match first
--_mtable-regex-cs=struct/(?:\b(?:public|private|protected|internal)\b )?+\benum\b (\b\w++\b)(?: ?: ([^\n{]++))?+(?:\n *+)?+[{]/\1/G/p{scope=push}{tenter=enum}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
	. \2 typeref:
}}
#  struct.class
--_mtable-regex-cs=struct/(?:\b(sealed|abstract)\b )?+(?:\bunsafe\b )?+(?:\bpartial\b )?+\bclass\b ([^\n :{<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\2/C/p{_field=inherits:(\4)}{_field=sl:\1}{scope=push}{tenter=class}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \2 typeref:
		_scoperef
	} for
}}
#  struct.struct
--_mtable-regex-cs=struct/\bstruct\b ([^\n :{<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\1/S/p{_field=inherits:(\3)}{scope=push}{tenter=struct}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
}}
#  struct.interface
--_mtable-regex-cs=struct/(?:\bpartial\b )?+\binterface\b ([^\n: {<]++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+)(?: ?: ([^#{]++))?+(?:#[^\n]++\n *+)?+[^{]*+[{]/\1/I/p{_field=inherits:(\3)}{scope=push}{tenter=class}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \1 typeref:
		_scoperef
	} for
}}
#  struct.member
--_mtable-regex-cs=struct/(?:\b(?:public|private|protected|internal|virtual|static|override|readonly)\b )*+(\w++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+[?]?+(?<sbrak>[\[](?:[^\]\[]*+(?&sbrak)?+)*+[\]])?+[?]?+) (?!\boperator\b)(\b\w++\b)(?: =[>]?+\s?+ *+([^;]++))?+;/\4/M/p{_field=type:\1}{_field=df:\5}{scope=ref}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \4 typeref:
		_scoperef
	} for
}}
#  struct.property
--_mtable-regex-cs=struct/(?:\b(?:public|private|protected|internal|vіrtual|static|override|readonly)\b )*+(\w++(?<abrak>[<](?:[^><]*+(?&abrak)?+)*+[>])?+[?]?+(?<sbrak>[\[](?:[^\]\[]*+(?&sbrak)?+)*+[\]])?+[?]?+) (\b\w++\b(?&sbrak)?+)\s?+ *+(?<brak>[{](?:[^}{]*+(?&brak)?+)*+[}])(?: =[>]?+ ([^;]++);)?+/\4/P/p{_field=type:\1}{_field=df:\6}{scope=ref}{{
	count -1 1 {
		pop aload pop /attribute exch _tag _commit
		dup \4 typeref:
		_scoperef
	} for
}}
#  struct.function (...)[ => ...];
--_mtable-regex-cs=struct/(?<par>[\(](?:[^\)\(]*+(?&par)?+)*+[\)])\s?+ *+(?:=>[^;]++)?+;//p{{
	count -1 1 {
		pop pop
	} for
}}
#  struct.function (...) { ... }
--_mtable-regex-cs=struct/(?<par>[\(](?:[^\)\(]*+(?&par)?+)*+[\)])[^{\n]*+(?:\n *+)?+[{]//p{tenter=function}{{
	count -1 1 {
		pop pop
	} for
}}
--_mtable-regex-cs=struct/.//p

# enum table
--_mtable-regex-cs=enum/[}]//p{scope=pop}{tleave}
--_mtable-regex-cs=enum/\/\*//p{tenter=comment}
--_mtable-regex-cs=enum/\/\/[^\n]*+\n//p
--_mtable-regex-cs=enum/(\b\w++\b)(?: ++= ([^,\n]++))?+[,\n]/\1/E/p{_field=df:\2}{scope=ref}
--_mtable-regex-cs=enum/.//p

# function table (better than recursive bracket due to comment handling)
#  Debug how many functions are in file, if we misparsed:
#	count pstack pop
--_mtable-regex-cs=function/[}]//p{tleave}
--_mtable-regex-cs=function/\/\*//p{tenter=comment}
--_mtable-regex-cs=function/\/\/[^\n]*+//p
--_mtable-regex-cs=function/[{]//p{tenter=function}{{
	count -1 1 {
		pop pop
	} for
}}
--_mtable-regex-cs=function/.//p
