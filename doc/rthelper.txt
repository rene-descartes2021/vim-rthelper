*rthelper.txt*  Automatic yamlls management for RobustToolbox

                  RTHELPER REFERENCE MANUAL
                    by rene.descartes2021

                                                *rthelper*

1. Introduction             |rthelper-intro|
2. Commands                 |rthelper-commands|
4. Global Settings          |rthelper-settings|

=============================================================================
1. Introduction                                 *rthelper-intro*

RTHelper builds on top of vim-Gutentags and integrates with vim-lsp.

Gutentags is a plugin that takes care of the much needed management of tags
files in Vim. It will (re)generate tag files as you work while staying
completely out of your way. It will even do its best to keep those tag files
out of your way too. It has no dependencies and just works.

In order to generate tag files, Gutentags will have to figure out what's in
your project. To do this, it will locate well-known project root markers like
SCM folders (.git, .hg, etc.), any custom tags you define (with
|gutentags_project_root|), and even things you may have defined already with
other plugins, like CtrlP.

If the current file you're editing is found to be in such a project, Gutentags
will make sure the tag file for that project is up to date. Then, as you work
in files in that project, it will partially re-generate the tag file. Every
time you save, it will silently, in the background, update the tags for that
file.

RTHelper is called each time Gutentags finishes updating the tag file, and
generates a json schema suitable for yaml-language-server to use. RTHelper
integrates with vim-lsp for setting yaml-language-server settings and
notifying of changes.


1.1 Requirements
                                                *rthelper-ctags-requirements*

It is required to use Universal Ctags, compiled with Perl regular expression
support.

The basic old BSD Ctags WON'T WORK. Universal Ctags distributed with Debian
isn't compiled with Perl regular expression support.

=============================================================================
2. Commands                                     *rthelper-commands*

                                                *:RTParse*
:RTParse
                        Parses the ctags file generated by vim-gutentags.
                        Takes approximately 10 seconds.

:RTParse!
                        Like |RTParse|, but forces a reparse of any cache.

                                                *:RTGenSchema*
:RTGenSchema
                        Uses the data parsed from RTParse and generates a
                        json schema for yamlls and notifies yamlls of the
                        change when using vim-lsp. Calls RTParse if necessary.

=============================================================================
4. Global Settings                              *rthelper-settings*

The following settings can be defined in your |vimrc| to change the default
behaviour of Gutentags.

                                                *rthelper_enabled*
g:rthelper_enabled
                        Defines whether RTHelper should be enabled.
                        Defaults to `1`.

                                                *rthepler_run_on_tags_updated*
g:rthelper_run_on_tags_updated
                        When true, RTHelper will run each time vim-gutentags
                        finishes updating, which is triggered after a file
                        write or launch of Vim.
                        Defaults to `1`.

                                                *rthelper_use_customTags*
g:rthelper_use_customTags
                        Registeres all [Serializable] with yamlls. While doing
                        so will remove some yamlls errors, this is not
                        recommended as this renders autocomplete unusable.
                        Defaults to `0`.

 vim:tw=78:et:ft=help:norl:
